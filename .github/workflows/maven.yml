# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    env:
      JDK_VERSION: "8"
      AUDIODEV: "null"
      APP_NAME: "lionheart-remake"
      APP_VERSION: "1.3.0-SNAPSHOT"
      APP_PLATFORM_WIN: "win32-x86"
      APP_PLATFORM_LINUX: "linux-x86_64"
    steps:   
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ matrix.os }}-java${{ env.JDK_VERSION }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ matrix.os }}-java${{ env.JDK_VERSION }}-
            maven-${{ matrix.os }}-

      - name: Set JDK
        uses: actions/setup-java@v3
        with:
          java-version: |
            ${{ env.JDK_VERSION }}
            17
          distribution: 'temurin'
          mvn-toolchain-id: |
            JavaSE-1.8
            JavaSE-17
            
      - name: Set GCC
        if: ${{ contains(matrix.os, 'ubuntu-latest') }}
        uses: egor-tensin/setup-gcc@v1.3
        with:
          version: latest
          platform: x64

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Decode Keystore
        id: write_keystore
        uses: timheuer/base64-to-file@v1.2
        with:
          fileName: 'android.jks'
          fileDir: 'lionheart-pc/'
          encodedString: ${{ secrets.KEYSTORE_BASE64 }}

      - name: Compile Java
        uses: coactions/setup-xvfb@v1
        with:
          run: mvn clean install --file lionheart-parent/pom.xml -U -Dgpg.passphrase=${{ secrets.GPG_PASSPHRASE }} -Dkeystore=android.jks -Dkeystore.alias=${{ secrets.KEYSTORE_ALIAS }} -Dkeystore.pass=${{ secrets.KEYSTORE_STOREPASS }} -Dkeystore.key=${{ secrets.KEYSTORE_PASS }} -DskipTests=true -Ppc,sign
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.KEYSTORE_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.KEYSTORE_PASS }}
          SIGNING_STORE_PASSWORD: ${{ secrets.KEYSTORE_STOREPASS }}
        
      - name: Prepare folders win32-x86
        if: ${{ contains(matrix.os, 'windows-latest') }}
        run: |
          set TARGET=${{ env.APP_NAME }}-${{ env.APP_VERSION }}_${{ env.APP_PLATFORM_WIN }}
          mkdir build
          mkdir build\%TARGET%
          mkdir build\%TARGET%\data
          mkdir build\%TARGET%\data\assets
          cd build\%TARGET%
          robocopy "..\..\distribution\doc" "doc" /E /NFL /NDL /NJH /NJS /nc /ns /np
          copy "..\..\CHANGELOG" "doc\CHANGELOG.txt"
          copy "..\..\LICENSE" "doc\LICENSE.txt"
          copy "..\..\distribution\data\splash.png" "data"
          copy "..\..\distribution\data\b3dgs.cer" "data"
          copy "..\..\distribution\data\.lionengine" "data"
          copy "..\..\lionheart-pc\target\lionheart-pc-${{ env.APP_VERSION }}.jar" "data"
          copy "..\..\lionheart-pc\target\lionheart-pc-${{ env.APP_VERSION }}.jar.asc" "data"
          copy "..\..\distribution\win32\bat\Lionheart Remake.bat" .
          copy "..\..\distribution\win32\bat\Configure.bat" .
          copy "..\..\distribution\win32\bat\Profile.bat" .
          robocopy "..\..\lionheart-assets\src\main\resources\com\b3dgs\lionheart" "data\assets" /MIR /NFL /NDL /NJH /NJS /nc /ns /np
          del /Q /F /S "stage*.png"
          cd ..\..
        shell: cmd
        
      - name: Prepare folders linux-x86_64
        if: ${{ contains(matrix.os, 'ubuntu-latest') }}
        run: |
          export TARGET=${{ env.APP_NAME }}-${{ env.APP_VERSION }}_${{ env.APP_PLATFORM_LINUX }}
          mkdir build
          mkdir build/$TARGET
          mkdir build/$TARGET/data
          mkdir build/$TARGET/data/assets
          cd build/$TARGET
          cp -R ../../distribution/doc "doc"
          cp "../../CHANGELOG" "doc/CHANGELOG.txt"
          cp "../../LICENSE" "doc/LICENSE.txt"
          cp ../../distribution/data/splash.png data
          cp ../../distribution/data/b3dgs.cer data
          cp ../../distribution/data/.lionengine data
          cp "../../lionheart-pc/target/lionheart-pc-${{ env.APP_VERSION }}.jar" data
          cp "../../lionheart-pc/target/lionheart-pc-${{ env.APP_VERSION }}.jar.asc" data
          cp ../../distribution/linux/sh/lionheart-remake.sh .
          cp ../../distribution/linux/sh/configure.sh .
          cp ../../distribution/linux/sh/profile.sh .
          cp -R ../../lionheart-assets/src/main/resources/com/b3dgs/lionheart/. data/assets
          find . -name 'stage*.png' -delete
          cd ../..
        shell: sh

      - name: Set JRE win32-x86_32
        if: ${{ contains(matrix.os, 'windows-latest') }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          architecture: x86

      - name: Bundle JRE win32-x86_32
        if: ${{ contains(matrix.os, 'windows-latest') }}
        run: |
          set TARGET=${{ env.APP_NAME }}-${{ env.APP_VERSION }}_${{ env.APP_PLATFORM_WIN }}
          jlink --compress=2 --strip-debug --no-header-files --no-man-pages --add-modules java.base,java.xml,jdk.xml.dom,java.prefs,java.desktop,java.logging --output build\%TARGET%\data\jre_win32-x86_32
        shell: cmd

      - name: Set JRE ${{ matrix.os }}-x86_64
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          architecture: x64

      - name: Bundle JRE win32-x86_64
        if: ${{ contains(matrix.os, 'windows-latest') }}
        run: |
          set TARGET=${{ env.APP_NAME }}-${{ env.APP_VERSION }}_${{ env.APP_PLATFORM_WIN }}
          jlink --compress=2 --strip-debug --no-header-files --no-man-pages --add-modules java.base,java.xml,jdk.xml.dom,java.prefs,java.desktop,java.logging --output build\%TARGET%\data\jre_win32-x86_64
        shell: cmd
        
      - name: Bundle JRE linux-x86_64
        if: ${{ contains(matrix.os, 'ubuntu-latest') }}
        run: |
          export TARGET=${{ env.APP_NAME }}-${{ env.APP_VERSION }}_${{ env.APP_PLATFORM_LINUX }}
          jlink --compress=2 --strip-debug --no-header-files --no-man-pages --add-modules java.base,java.xml,jdk.xml.dom,java.prefs,java.desktop,java.logging --output build/$TARGET/data/jre_linux-x86_64
        shell: sh
        
      - name: Compile c linux-x86_64
        if: ${{ contains(matrix.os, 'ubuntu-latest') }}
        shell: sh
        run: |
          export TARGET=${{ env.APP_NAME }}-${{ env.APP_VERSION }}_${{ env.APP_PLATFORM_LINUX }}
          gcc distribution/linux/src/main.c -s -static -o build/$TARGET/lionheart-remake
          chmod +x build/$TARGET/lionheart-remake

      - name: msbuild win32-x86
        if: ${{ contains(matrix.os, 'windows-latest') }}
        uses: microsoft/setup-msbuild@v1.1

      - name: Compile vsproject win32-x86
        if: ${{ contains(matrix.os, 'windows-latest') }}
        run: |
          set TARGET=${{ env.APP_NAME }}-${{ env.APP_VERSION }}_${{ env.APP_PLATFORM_WIN }}
          msbuild "distribution\win32\src\Lionheart Remake\Lionheart Remake\Lionheart Remake.vcxproj" -t:rebuild -verbosity:diag -property:Configuration=Release
          msbuild "distribution\win32\src\Lionheart Remake Configure\Lionheart Remake Configure\Lionheart Remake Configure.vcxproj" -t:rebuild -verbosity:diag -property:Configuration=Release
          copy "distribution\win32\src\Lionheart Remake\Lionheart Remake\Release\Lionheart Remake.exe" "build\%TARGET%"
          copy "distribution\win32\src\Lionheart Remake Configure\Lionheart Remake Configure\Release\Configure.exe" "build\%TARGET%"
        shell: cmd

      - name: Sign win32-x86
        if: ${{ contains(matrix.os, 'windows-latest') }}
        run: |
          set TARGET=${{ env.APP_NAME }}-${{ env.APP_VERSION }}_${{ env.APP_PLATFORM_WIN }}
          dir "C:\Program Files (x86)\Windows Kits\10\bin\"
          echo ${{ secrets.CODESIGN_BASE64 }} >> base64.txt
          certutil -decode base64.txt cert.pfx
          "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x86\signtool.exe" sign /f cert.pfx /p ${{ secrets.CODESIGN_PWD }} /tr http://timestamp.digicert.com /td SHA256 /fd SHA256 "build\%TARGET%\Lionheart Remake.exe"
          "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x86\signtool.exe" sign /f cert.pfx /p ${{ secrets.CODESIGN_PWD }} /tr http://timestamp.digicert.com /td SHA256 /fd SHA256 "build\%TARGET%\Configure.exe"
          del base64.txt
          del cert.pfx
        shell: cmd

      - name: Make Archive win32-x86
        if: ${{ contains(matrix.os, 'windows-latest') }}
        shell: cmd
        run: |
          set TARGET=${{ env.APP_NAME }}-${{ env.APP_VERSION }}_${{ env.APP_PLATFORM_WIN }}
          copy "distribution\win32\src\sfxmaker.txt" "build"
          copy "distribution\win32\src\7zsd_LZMA2.sfx" "build"
          cd build
          7z a -t7z -mf=off -m0=lzma2 -mx=9 %TARGET%.7z %TARGET%
          copy /b "7zsd_LZMA2.sfx" + "sfxmaker.txt" + "%TARGET%.7z" "%TARGET%.exe"
          cd ..
          mkdir reshack
          
      - name: Make Archive linux-x86_64
        if: ${{ contains(matrix.os, 'ubuntu-latest') }}
        shell: sh
        run: |
          export TARGET=${{ env.APP_NAME }}-${{ env.APP_VERSION }}_${{ env.APP_PLATFORM_LINUX }}
          cd build
          tar -cf - $TARGET | xz -1ze -T0 >$TARGET.tar.xz
          rm -r -f $TARGET
          cd ..

      - name: Get reshack win32-x86
        if: ${{ contains(matrix.os, 'windows-latest') }}
        uses: gamedev-thingy/Download-Extract@done
        with:
          url: "http://www.angusj.com/resourcehacker/resource_hacker.zip"
          destination: reshack
          ZIPname: "resource_hacker.zip"

      - name: Update info win32-x86
        if: ${{ contains(matrix.os, 'windows-latest') }}
        run: |
          set TARGET=${{ env.APP_NAME }}-${{ env.APP_VERSION }}_${{ env.APP_PLATFORM_WIN }}
          reshack\ResourceHacker.exe -open "build\%TARGET%.exe" -save "build\%TARGET%.exe" -action addoverwrite -res "distribution\win32\src\versioninfo.res",
        shell: cmd

      - name: Sign SFX win32-x86
        if: ${{ contains(matrix.os, 'windows-latest') }}
        run: |
          set TARGET=${{ env.APP_NAME }}-${{ env.APP_VERSION }}_${{ env.APP_PLATFORM_WIN }}
          echo ${{ secrets.CODESIGN_BASE64 }} >> base64.txt
          certutil -decode base64.txt cert.pfx
          "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x86\signtool.exe" sign /f cert.pfx /p ${{ secrets.CODESIGN_PWD }} /tr http://timestamp.digicert.com /td SHA256 /fd SHA256 "build\%TARGET%.exe"
          del base64.txt
          del cert.pfx
        shell: cmd

      - name: Clean win32-x86
        if: ${{ contains(matrix.os, 'windows-latest') }}
        run: |
          set TARGET=${{ env.APP_NAME }}-${{ env.APP_VERSION }}_${{ env.APP_PLATFORM_WIN }}
          cd build
          del 7zsd_LZMA2.sfx
          del sfxmaker.txt
          del "%TARGET%.7z"
          rmdir /S /Q "%TARGET%"
        shell: cmd

      - name: Deploy
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ftp.b3dgs.com
          username: ${{ secrets.LOGIN }}
          password: ${{ secrets.PASSWORD }}
          local-dir: build/
          server-dir: ${{ env.APP_VERSION }}/
