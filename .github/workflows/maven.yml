# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
    runs-on: ${{ matrix.os }}
    env:
      JDK_VERSION: "8"
      AUDIODEV: "null"
      APP_NAME: "lionheart-remake"
      APP_PLATFORM: "win32-x86"
    steps:   
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ matrix.os }}-java${{ env.JDK_VERSION }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ matrix.os }}-java${{ env.JDK_VERSION }}-
            maven-${{ matrix.os }}-

      - name: Set JDK
        uses: actions/setup-java@v3
        with:
          java-version: |
            ${{ env.JDK_VERSION }}
            17
          distribution: 'temurin'
          mvn-toolchain-id: |
            JavaSE-1.8
            JavaSE-17

      - name: Get version
        run: |
          (mvn help:evaluate --file lionheart-parent/pom.xml -Dexpression=project.version -q -DforceStdout & echo.) >2 & (set /p APP_VERSION=)<2
        shell: cmd

      - name: Compile Java
        uses: coactions/setup-xvfb@v1
        with:
          run: mvn clean install --file lionheart-parent/pom.xml -U -DskipTests=true -Ppc

      - name: ${{ matrix.os }} Prepare folders
        if: ${{ matrix.os }} == "windows-latest"
        run: |
          set TARGET=${{ env.APP_NAME }}-${{ env.APP_VERSION }}_${{ env.APP_PLATFORM }}
          rmdir /S /Q build
          mkdir build
          mkdir build\%TARGET%
          mkdir build\%TARGET%\data
          mkdir build\%TARGET%\data\assets
          cd build\%TARGET%
          robocopy "..\..\distribution\doc" "doc" /E /NFL /NDL /NJH /NJS /nc /ns /np
          copy "..\..\CHANGELOG" "doc\CHANGELOG.txt"
          copy "..\..\LICENSE" "doc\LICENSE.txt"
          copy "..\..\distribution\data\splash.png" "data"
          copy "..\..\distribution\data\b3dgs.cer" "data"
          copy "..\..\distribution\data\.lionengine" "data"
          copy "..\..\lionheart-pc\target\lionheart-pc-${{ env.APP_VERSION }}.jar" "data"
          copy "..\..\lionheart-pc\target\lionheart-pc-${{ env.APP_VERSION }}.jar.asc" "data"
          copy "..\..\lionheart-pc\target\lionheart-pc-${{ env.APP_VERSION }}.jar" "data"
          copy "..\..\distribution\win32\bat\Lionheart Remake.bat" .
          copy "..\..\distribution\win32\bat\Configure.bat" .
          copy "..\..\distribution\win32\bat\Profile.bat" .
          robocopy "..\..\lionheart-assets\src\main\resources\com\b3dgs\lionheart" "data\assets" /MIR /NFL /NDL /NJH /NJS /nc /ns /np
          del /Q /F /S "stage*.png"
          cd ..\..
        shell: cmd
        
      - name: ${{ matrix.os }} Find and Replace
        if: ${{ matrix.os }} == "windows-latest"
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "set VERSION=1.3.0"
          replace: "set VERSION=${{ env.APP_VERSION }}"
          include: "build/${{ env.APP_NAME }}-${{ env.APP_VERSION }}_${{ env.APP_PLATFORM }}/**.bat"
          regex: false

      - name: ${{ matrix.os }} Set JRE x86_32
        if: ${{ matrix.os }} == "windows-latest"
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          architecture: x86

      - name: ${{ matrix.os }} Bundle JRE x86_32
        if: ${{ matrix.os }} == "windows-latest"
        run: |
          set TARGET=${{ env.APP_NAME }}-${{ env.APP_VERSION }}_${{ env.APP_PLATFORM }}
          jlink --compress=2 --strip-debug --no-header-files --no-man-pages --add-modules java.base,java.xml,jdk.xml.dom,java.prefs,java.desktop,java.logging --output build\%TARGET%\data\jre_win32-x86_32
        shell: cmd

      - name: ${{ matrix.os }} Set JRE x86_64
        if: ${{ matrix.os }} == "windows-latest"
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          architecture: x64

      - name: ${{ matrix.os }} Bundle JRE x86_64
        if: ${{ matrix.os }} == "windows-latest"
        run: |
          set TARGET=${{ env.APP_NAME }}-${{ env.APP_VERSION }}_${{ env.APP_PLATFORM }}
          jlink --compress=2 --strip-debug --no-header-files --no-man-pages --add-modules java.base,java.xml,jdk.xml.dom,java.prefs,java.desktop,java.logging --output build\%TARGET%\data\jre_win32-x86_64
        shell: cmd

      - name: ${{ matrix.os }} msbuild
        if: ${{ matrix.os }} == "windows-latest"
        uses: microsoft/setup-msbuild@v1.1

      - name: ${{ matrix.os }} Compile vsproject
        if: ${{ matrix.os }} == "windows-latest"
        run: |
          set TARGET=${{ env.APP_NAME }}-${{ env.APP_VERSION }}_${{ env.APP_PLATFORM }}
          msbuild "distribution\win32\src\Lionheart Remake\Lionheart Remake\Lionheart Remake.vcxproj" -t:rebuild -verbosity:diag -property:Configuration=Release
          msbuild "distribution\win32\src\Lionheart Remake Configure\Lionheart Remake Configure\Lionheart Remake Configure.vcxproj" -t:rebuild -verbosity:diag -property:Configuration=Release
          copy "distribution\win32\src\Lionheart Remake\Lionheart Remake\Release\Lionheart Remake.exe" "build\%TARGET%"
          copy "distribution\win32\src\Lionheart Remake Configure\Lionheart Remake Configure\Release\Configure.exe" "build\%TARGET%"
        shell: cmd

      - name: ${{ matrix.os }} Sign
        if: ${{ matrix.os }} == "windows-latest"
        uses: GabrielAcostaEngler/signtool-code-sign@main
        with:
          certificate: '${{ secrets.CODESIGN_BASE64 }}'
          cert-password: '${{ secrets.CODESIGN_PWD }}'
          cert-sha1: '${{ secrets.CODESIGN_SHA1 }}'
          cert-description: 'Byron 3D Games Studio'
          folder: 'build\${{ env.APP_NAME }}-${{ env.APP_VERSION }}_${{ env.APP_PLATFORM }}'
          recursive: false
          timestamp-server: 'http://timestamp.digicert.com'

      - name: ${{ matrix.os }} Make Archive
        if: ${{ matrix.os }} == "windows-latest"
        shell: cmd
        run: |
          set TARGET=${{ env.APP_NAME }}-${{ env.APP_VERSION }}_${{ env.APP_PLATFORM }}
          copy "distribution\win32\src\sfxmaker.txt" "build"
          copy "distribution\win32\src\7zsd_LZMA2.sfx" "build"
          cd build
          7z a -t7z -mf=off -m0=lzma2 -mx=9 %TARGET%.7z %TARGET%
          copy /b "7zsd_LZMA2.sfx" + "sfxmaker.txt" + "%TARGET%.7z" "%TARGET%.exe"
          cd ..
          mkdir reshack

      - name: ${{ matrix.os }} Get reshack
        if: ${{ matrix.os }} == "windows-latest"
        uses: gamedev-thingy/Download-Extract@done
        with:
          url: "http://www.angusj.com/resourcehacker/resource_hacker.zip"
          destination: reshack
          ZIPname: "resource_hacker.zip"

      - name: ${{ matrix.os }} Update info
        if: ${{ matrix.os }} == "windows-latest"
        run: |
          reshack\ResourceHacker.exe -open "..\build\${{ env.APP_NAME }}-${{ env.APP_VERSION }}_${{ env.APP_PLATFORM }}.exe" -save "..\build\${{ env.APP_NAME }}-${{ env.APP_VERSION }}_${{ env.APP_PLATFORM }}.exe" -action delete -mask versioninfo, 1,
          reshack\ResourceHacker.exe -open "..\build\${{ env.APP_NAME }}-${{ env.APP_VERSION }}_${{ env.APP_PLATFORM }}.exe" -save "..\build\${{ env.APP_NAME }}-${{ env.APP_VERSION }}_${{ env.APP_PLATFORM }}.exe" -action add -res "..\distribution\win32\src\versioninfo.res" -mask versioninfo, 1,
          reshack\ResourceHacker.exe -open "..\build\${{ env.APP_NAME }}-${{ env.APP_VERSION }}_${{ env.APP_PLATFORM }}.exe" -save "..\build\${{ env.APP_NAME }}-${{ env.APP_VERSION }}_${{ env.APP_PLATFORM }}.exe" -action changelanguage(1033)

      - name: ${{ matrix.os }} Sign SFX
        if: ${{ matrix.os }} == "windows-latest"
        uses: GabrielAcostaEngler/signtool-code-sign@main
        with:
          certificate: '${{ secrets.CODESIGN_BASE64 }}'
          cert-password: '${{ secrets.CODESIGN_PWD }}'
          cert-sha1: '${{ secrets.CODESIGN_SHA1 }}'
          cert-description: 'Byron 3D Games Studio'
          folder: 'build'
          recursive: false
          timestamp-server: 'http://timestamp.digicert.com'

      - name: ${{ matrix.os }} Clean
        if: ${{ matrix.os }} == "windows-latest"
        run: |
          set TARGET=${{ env.APP_NAME }}-${{ env.APP_VERSION }}_${{ env.APP_PLATFORM }}
          cd build
          del 7zsd_LZMA2.sfx
          del sfxmaker.txt
          del "%TARGET%.7z"
          rmdir /S /Q "%TARGET%"
        shell: cmd

      - name: Deploy
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ftp.b3dgs.com
          username: ${{ secrets.LOGIN }}
          password: ${{ secrets.PASSWORD }}
          local-dir: build/
          server-dir: ${{ env.APP_VERSION }}/
